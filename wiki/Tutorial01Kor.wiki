#summary EchoServer Tutorial(Korean)

이벤트 모델을 생성합니다. 
{{{
NetworkInstance->Create<HalfNetwork::ProactorFactory>();
}}}
혹은
{{{
NetworkInstance->Create<HalfNetwork::ReactorFactory>();
}}}

윈도우에서는 Proactor를, 리눅스라면 Reactor를 추천합니다.

Listen할 포트와 Queue ID를 넣어줍니다.
{{{
int port = 25251;
int queueID = 103;
NetworkInstance->AddAcceptor(NULL, port, queueID);
}}}
첫번째 인자는 특정 ip에서만 접속을 받고 싶을때만 해당 ip를 넣어주면 됩니다. 사용하지 않을 경우에는 빈문자열이나 NULL를 넣어줍니다. 더 자세한 내용은 [FunctionReferenceKor#Add_Acceptor AddAcceptor]를 참조하세요.

Listen를 시작합니다. 
{{{
NetworkInstance->Open();
}}}
몇가지 설정값을 인자로 넣어줄 수도 있습니다. 자세한 설명은 [FunctionReferenceKor#Open Open]를 참조하세요.

새로운 메세지가 있는지 주기적으로 검사합니다.
{{{
using namespace HalfNetwork;
ACE_Message_Block* commandBlock = NULL;
bool receiveData = NetworkInstance->PopMessage(queueID, &commandBlock, -1);
if (false == receiveData)
	return;

MessagePostee postee;
memcpy(&postee, commandBlock->rd_ptr(), sizeof(MessagePostee));
commandBlock->rd_ptr(sizeof(MessagePostee));
ACE_Message_Block* payloadBlock = commandBlock->cont();
switch(postee.command)
{
case eMH_Establish:
	OnAccept(postee.stream_id, payloadBlock->rd_ptr());
	break;
case eMH_Read:
	OnRead(postee.stream_id, payloadBlock->rd_ptr(), payloadBlock->length());
	break;
case eMH_Close:
	OnClose(postee.stream_id);
	break;
}
commandBlock->release();
}}}
성능을 위해서는 [FunctionReferenceKor#Pop_Message PopMessage]보다는 [FunctionReferenceKor#Pop_All_Message PopAllMessage]를 사용하는 것이 좋습니다.

받은 패킷을 그대로 보내줍니다.
{{{
void OnRead(unsigned int streamID, char* buffer, unsigned int length)
{
	ACE_Message_Block* block = NetworkInstance->AllocateBlock(length);
	block->copy(buffer, length);
	NetworkInstance->SendRequest(streamID, block);
}
}}}